% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tbll_xtable.R
\name{Tbll_xtabs}
\alias{Tbll_xtabs}
\alias{Tbll_xtabs.default}
\alias{Tbll_xtabs.NULL}
\alias{Tbll_xtabs.glm}
\alias{Tbll_xtabs.formula}
\alias{Tbll_xtabs.data.frame}
\alias{Tbll_xtabs.table}
\alias{Tbll_xtabs.xtabs}
\alias{Tbll.summary.table}
\alias{Klassifikation}
\alias{Klassifikation.glm}
\alias{Klassifikation.table}
\alias{Klassifikation.xtabs}
\title{Kreuztabellen}
\usage{
Tbll_xtabs(x, ...)

\method{Tbll_xtabs}{default}(x, ...)

\method{Tbll_xtabs}{`NULL`}()

\method{Tbll_xtabs}{glm}(x, thresh = 0.5, ...)

\method{Tbll_xtabs}{formula}(
  x,
  data = NULL,
  addNA = FALSE,
  exclude = if (!addNA) c(NA, NaN),
  drop.unused.levels = FALSE,
  margin = NULL,
  add.margins = NULL,
  ...
)

\method{Tbll_xtabs}{data.frame}(
  data,
  ...,
  include.count = TRUE,
  include.percent = TRUE,
  include.prop.chisq = FALSE,
  include.chisq = FALSE,
  include.fisher = FALSE,
  include.test = any(c(include.fisher, include.chisq, include.prop.chisq)),
  include.correlation = FALSE,
  include.diagnostic = FALSE,
  margin = NULL,
  add.margins = NA,
  digits = get_opt("prozent", "digits"),
  prevalence = NULL,
  addNA = FALSE,
  exclude = if (!addNA) c(NA, NaN),
  drop.unused.levels = FALSE
)

\method{Tbll_xtabs}{table}(...)

\method{Tbll_xtabs}{xtabs}(
  x,
  include.count = TRUE,
  include.percent = TRUE,
  include.prop.chisq = FALSE,
  include.chisq = FALSE,
  include.fisher = FALSE,
  include.test = any(c(include.fisher, include.chisq, include.prop.chisq)),
  include.correlation = FALSE,
  include.diagnostic = FALSE,
  margin = NULL,
  add.margins = NULL,
  digits = get_opt("prozent", "digits"),
  prevalence = NULL,
  ...
)

Tbll.summary.table(x, ...)

Klassifikation(x, ...)

\method{Klassifikation}{glm}(x, thresh = 0.5, ...)

\method{Klassifikation}{table}(...)

\method{Klassifikation}{xtabs}(
  x,
  lvs = c("positiv", "negativ"),
  digits = 2,
  prevalence = NULL,
  ...
)
}
\arguments{
\item{x, data}{formula und data.frame geht an xtabs}

\item{...}{weitere Objekte nicht benutzt}

\item{thresh}{Klassifikation auf Basis der Vorhersage Schwelle bei P=0.5}

\item{addNA, exclude, drop.unused.levels}{an xtabs()}

\item{margin, add.margins}{Prozent und total}

\item{include.percent, include.count}{ausgabe}

\item{include.test, test, include.prop.chisq, include.chisq, include.fisher}{die Tests}

\item{include.correlation}{Korrelation}

\item{include.diagnostic, include.sensitivity, prevalence}{ascostat}

\item{digits}{Nachkommastellen}

\item{x}{glm oder xtab Objekt}

\item{caption}{an Output}
}
\value{
list("xtab","fisher_test","diagnostic.test")

A data.frame Objekt.
}
\description{
Classification Table  classification_table
 Richtige und falsche Klassifikationen
 Bei  2x2 Tabellen der Kappa Test

Sensitivity = A/(A+C)

Specificity = D/(B+D)

Prevalence = (A+C)/(A+B+C+D)

PPV = (sensitivity * prevalence)/((sensitivity*prevalence) + ((1-specificity)*(1-prevalence)))

NPV = (specificity * (1-prevalence))/(((1-sensitivity)*prevalence) + ((specificity)*(1-prevalence)))

Detection Rate = A/(A+B+C+D)

Detection Prevalence = (A+B)/(A+B+C+D)

Balanced Accuracy = (sensitivity+specificity)/2

Precision = A/(A+B)

Recall = A/(A+C)

F1 = (1+beta^2)*precision*recall/((beta^2 * precision)+recall)


Klassifikation fuer Binominal-GLM

Klassifikation.glm

xtabs-Objekt
}
\examples{


 data(infert, package = "datasets")
infert$case  <- factor(infert$case , 1:0, c("case", "control"))

infert$spontaneous <- factor(infert$spontaneous)
infert$induced2    <- factor(infert$induced == 0)

Tbll_xtabs( ~  case, infert)
Tbll_xtabs( ~ induced2 + case, infert)
Tbll_xtabs( ~ induced + case, infert)
Tbll_xtabs( ~ induced + education, infert)


Tbll_xtabs( ~ induced + education + case,
            infert,
            margin = "case",
            #  add.margins = c("education", "induced"),
            include.count = FALSE)

Tbll_xtabs(
  ~ induced + education + case,
  infert,
  margin = "case",
  add.margins = c("case"),
  include.count = FALSE
)




df<- data.frame(A = c(1,0,0,1,0,1,0,1,1,0,0,0,0,1,1),
B = c(0,0,1,0,1,0,1,1,1,1,1,1,1,0,0)
)


Tbll_xtabs(
  ~ A + B,
  df,
  include.percent = FALSE,
  include.test = TRUE,
  include.diagnostic = TRUE
)




data(infert, package = "datasets")
infert$case  <- factor(infert$case ,1:0, c("case", "control") )

infert$spontaneous <- factor(infert$spontaneous)
infert$induced2    <- factor(infert$induced==0)

tab_1<- xtabs(~  case, infert)
tab_2x2<- xtabs(~ induced2 + case, infert)
tab_3x2<- xtabs(~ induced + case, infert)
tab_3x3<- xtabs(~ induced + education, infert)
tab_3x3x2<- xtabs(~ induced + education+case, infert)

#Tbll_xtabs(summary(tab_3x3x2))

(Tbll_xtabs(tab_1, include.test=TRUE))
(Tbll_xtabs(tab_2x2, include.test=TRUE))
(Tbll_xtabs(tab_3x2, include.test=TRUE))
(Tbll_xtabs(tab_3x3, include.test=TRUE))
(Tbll_xtabs(tab_3x3x2, include.test=TRUE))


a <- letters[1:3]
Tbll(summary(table(a, sample(a))))


 require(stp25data)

x<-xtabs(~gruppe+lai, hkarz)

Klassifikation(x)

# require(stp25data)
# fit1<- glm(gruppe~lai, hkarz, family = binomial)
# thkarz <- as.data.frame(xtabs(~gruppe+lai, hkarz))
# fit2<- glm(Freq ~ gruppe*lai, thkarz, family = poisson())


 # require(stp25data)
 # hkarz$LAI<- factor(hkarz$lai, 0:1, c("pos", "neg"))
 # Klassifikation(xtabs(~gruppe+LAI, hkarz), test=TRUE, type="fischer")

 tab <- matrix(c(94, 40, 39, 40), ncol = 2, byrow = TRUE)
 tbll_extract(caret::confusionMatrix(tab))
 tbll_extract(epiR::epi.tests(tab) )

 Klassifikation(as.table(tab))


# dat <-
#   get_data("
# outcome    A B
# a   94 40
# b   39  40",
#            tabel_expand = TRUE,
#            value = "test")
#
#
# dat$outcome <- ifelse(dat$outcome =="a",1,0)
# dat$test <- ifelse(dat$test =="A",1,0)
# xtabs( ~ outcome + test, dat)
#
# fit<- glm(outcome~ test, dat, family = binomial())
#
#
# summary(fit)
# dat$residuals <- residuals(fit)
# dat$predict <- predict(fit)
#
# (dat)
#
# require(glue)
# require(pROC)
# fit_roc <- pROC::roc( dat$outcome, dat$test )
# Tbll( fit_roc )
# ?coords(fit_roc)
#
#
# roc.liver <- roc( outcome ~ predict, dat)
#
# auc<- roc.liver$auc
# glue( 'Area under the curve: {sprintf("\%.3f", auc)} it means there is a {sprintf("\%.0f", auc*100)} \% chance that the model
#  will be able to distinguish between positive class and negative class.')
#
#
# plot(roc.liver)

}
