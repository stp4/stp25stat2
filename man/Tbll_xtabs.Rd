% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tbll_xtable.R
\name{Tbll_xtabs}
\alias{Tbll_xtabs}
\alias{Tbll_xtabs.default}
\alias{Tbll_xtabs.NULL}
\alias{Tbll_xtabs.glm}
\alias{Tbll_xtabs.formula}
\alias{Tbll_xtabs.data.frame}
\alias{Tbll_xtabs.table}
\alias{Tbll_xtabs.xtabs}
\alias{Tbll.summary.table}
\alias{Klassifikation}
\alias{Klassifikation.glm}
\alias{Klassifikation.table}
\alias{Klassifikation.xtabs}
\title{Kreuztabellen}
\usage{
Tbll_xtabs(x, ...)

\method{Tbll_xtabs}{default}(x, ...)

\method{Tbll_xtabs}{`NULL`}()

\method{Tbll_xtabs}{glm}(x, thresh = 0.5, ...)

\method{Tbll_xtabs}{formula}(
  x,
  data = NULL,
  addNA = FALSE,
  exclude = if (!addNA) c(NA, NaN),
  drop.unused.levels = FALSE,
  margin = NULL,
  add.margins = NULL,
  N_data = nrow(data),
  ...
)

\method{Tbll_xtabs}{data.frame}(
  x,
  ...,
  include.count = TRUE,
  include.percent = TRUE,
  include.prop.chisq = FALSE,
  include.chisq = FALSE,
  include.fisher = FALSE,
  include.test = any(c(include.fisher, include.chisq, include.prop.chisq)),
  include.correlation = FALSE,
  include.diagnostic = FALSE,
  margin = NULL,
  add.margins = NA,
  digits = get_opt("prozent", "digits"),
  prevalence = NULL,
  addNA = FALSE,
  exclude = if (!addNA) c(NA, NaN),
  drop.unused.levels = FALSE
)

\method{Tbll_xtabs}{table}(...)

\method{Tbll_xtabs}{xtabs}(
  x,
  include.count = TRUE,
  include.percent = TRUE,
  include.prop.chisq = FALSE,
  include.chisq = FALSE,
  include.fisher = FALSE,
  include.test = any(c(include.fisher, include.chisq, include.prop.chisq)),
  include.correlation = FALSE,
  include.diagnostic = FALSE,
  margin = NULL,
  add.margins = NULL,
  digits = get_opt("prozent", "digits"),
  prevalence = NULL,
  N_data = sum(x),
  ...
)

Tbll.summary.table(x, ...)

Klassifikation(x, ...)

\method{Klassifikation}{glm}(x, thresh = 0.5, ...)

\method{Klassifikation}{table}(...)

\method{Klassifikation}{xtabs}(
  x,
  lvs = c("positiv", "negativ"),
  digits = 2,
  prevalence = NULL,
  ...
)
}
\arguments{
\item{x}{Objekt  glm, xtab, formula}

\item{...}{include.test usw}

\item{thresh}{Klassifikation auf Basis der Vorhersage Schwelle bei P=0.5}

\item{data}{formula und data.frame geht an xtabs}

\item{addNA, exclude, drop.unused.levels}{an xtabs()'}

\item{margin, add.margins}{Prozent und Total add.margins gibt an welche Spalten  geht am addmargins()}

\item{include.count}{Anzahl}

\item{include.percent}{Prozent}

\item{include.prop.chisq, include.chisq, include.fisher, include.test}{Sig. Test}

\item{include.correlation}{Korrelation}

\item{include.diagnostic, prevalence}{Diagnostic}

\item{digits}{Nachkommastellen}

\item{lvs, N_data}{internal was fuer eine Tabelle kommt}
}
\value{
list("xtab","fisher_test","diagnostic.test")

A data.frame Objekt.
}
\description{
Classification Table  classification_table
 Richtige und falsche Klassifikationen
 Bei  2x2 Tabellen der Kappa Test

Sensitivity = A/(A+C)

Specificity = D/(B+D)

Prevalence = (A+C)/(A+B+C+D)

PPV = (sensitivity * prevalence)/((sensitivity*prevalence) + ((1-specificity)*(1-prevalence)))

NPV = (specificity * (1-prevalence))/(((1-sensitivity)*prevalence) + ((specificity)*(1-prevalence)))

Detection Rate = A/(A+B+C+D)

Detection Prevalence = (A+B)/(A+B+C+D)

Balanced Accuracy = (sensitivity+specificity)/2

Precision = A/(A+B)

Recall = A/(A+C)

F1 = (1+beta^2)*precision*recall/((beta^2 * precision)+recall)


Klassifikation fuer Binominal-GLM

Klassifikation.glm

xtabs-Objekt
}
\examples{

\donttest{

Plank <- data.frame(
  therapy = c("H+A", "H+A+P", "H+A", "H+A+P", "H+A", "H+A+P", "H+A", "H+A+P"),
  mace = c("yes", "yes", "no", "no", "yes", "yes", "no", "no"),
  infarction = c("NSTEMI", "NSTEMI", "NSTEMI", "NSTEMI", "STEMI", "STEMI", "STEMI", "STEMI"),
  freq = c(7, 1, 140, 54, 63, 14, 221, 126)
)
Plank$mace_bin <- ifelse(Plank$mace == "yes", 1, 0)


xtabs(freq ~ therapy + infarction + mace, Plank)

# OR
glm_logistic <- glm(mace_bin ~ therapy * infarction,
                    data=Plank, weights = freq,
                    family = binomial())
# RR
# glm_poisson <- glm(freq ~ therapy * mace + infarction * mace,family = poisson(),data = Plank)


set_opt(percent=list(digits=1))
Tbll_xtabs(freq ~ therapy + infarction + mace,
           Plank,
           margin= 1:2,
           add.margins = 3)

# andere Methode die Prozent zu berechnen -> glm-logistic
Tbll_effect(glm_logistic, digits = 3, include.ci = FALSE)




data(infert, package = "datasets")
infert$case  <- factor(infert$case ,1:0, c("case", "control") )
infert$spontaneous <- factor(infert$spontaneous)
infert$induced2    <- factor(infert$induced==0)

tab_1 <- xtabs( ~  case, infert)
tab_2x2 <- xtabs( ~ induced2 + case, infert)
tab_3x2 <- xtabs( ~ induced + case, infert)
tab_3x3 <- xtabs( ~ induced + education, infert)
tab_3x3x2 <- xtabs( ~ induced + education + case, infert)

Tbll(summary(tab_3x3x2))

Tbll_xtabs(tab_1, include.test=TRUE)
Tbll_xtabs(tab_2x2, include.test=TRUE)
Tbll_xtabs(tab_3x2, include.test=TRUE)
Tbll_xtabs(tab_3x3, include.test=TRUE)
Tbll_xtabs(tab_3x3x2, include.test=TRUE)


Klassifikation(tab_2x2)

tab <- matrix(c(94, 40, 39, 40), ncol = 2, byrow = TRUE)
tbll_extract(caret::confusionMatrix(tab))
tbll_extract(epiR::epi.tests(tab) )

Klassifikation(as.table(tab))

}

}
